#!/bin/bash

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Print a random ascii art

asciiart() {

    local asciiFilePath=""

    local source="${BASH_SOURCE[0]}"
    local scriptPath=""

    # Resolve $source until the file is no longer a symlink
    while [ -h "$source"  ]; do
        scriptPath="$( cd -P "$( dirname "$source"  )" >/dev/null 2>&1 && pwd  )"
        source="$(readlink "$source")"
        # If $source was a relative symlink, we need to resolve it
        # relative to the path where the symlink file was located
        [[ $source != /*  ]] && source="$scriptPath/$source"
    done

    scriptPath="$( cd -P "$( dirname "$source"  )" >/dev/null 2>&1 && pwd  )"
    asciiFilePath="$scriptPath/asciiarts/$(ls -p "$scriptPath/asciiarts"/ | grep -v / | sort -R | tail -1)"

    printf "\n"

    while IFS='' read -r line || [[ -n "$line"  ]]; do
        echo "            $line"
    done < "$asciiFilePath"

    printf "\n"

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Check if the given command exists.

cmd_exists() {
    command -v "$1" &> /dev/null
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Create data URI from a file.

datauri() {

    local mimeType=""

    if [ -f "$1" ]; then
        mimeType=$(file -b --mime-type "$1")
        #                └─ do not prepend the filename to the output

        if [[ $mimeType == text/* ]]; then
            mimeType="$mimeType;charset=utf-8"
        fi

        printf "data:%s;base64,%s" \
            "$mimeType" \
            "$(openssl base64 -in "$1" | tr -d "\n")"
    else
        printf "%s is not a file" "$1"
    fi

    printf "\n"

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Delete files that match a certain pattern from the current directory.

delete-files() {
    local q="${1:-*.DS_Store}"
    find . -type f -name "$q" -ls -delete
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Sort the files/directories by file size

dus() {
    du -sh "$@" | sort -hr
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Execute arithmetic operations

eq() {
    set -f
    echo $@ | bc
    set +f
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Fuzzy find files, then once selected edit it in your preferred editor.

fzf_find_edit() {

    local files=$(
        if [ "$FZF_PREVIEW" -eq 1 ]; then
            fzf --multi --preview 'bat --color=always --line-range :500 {}'
        else
            fzf --multi
        fi
    )

    if [[ -n $files ]]; then
        ${EDITOR:-vim} $files
    fi

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Fuzzy git add.

fzf_git_add() {

    local files=$(
        git ls-files \
            --deleted \
            --modified \
            --others \
            --killed \
            --directory \
            --no-empty-directory |
            sort --unique |
            fzf --ansi
    )

    if [[ -n $files ]]; then
        git add --verbose $files
    fi

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Fuzzy search in git logs.

fzf_git_log() {

    local commits=$(
        if [ "$FZF_PREVIEW" -eq 1 ]; then
            git l --color=always "$@" |
                fzf --ansi --no-sort --height 100% \
                    --preview "echo {} |
                        grep -o '[a-f0-9]\{7\}' |
                        head -1 |
                        xargs -I@ sh -c 'git show --color=always @'"
        else
            git l --color=always "$@" |
                fzf --ansi --no-sort --height 100%
        fi
    )

    if [[ -n $commits ]]; then
        local hashes=$(printf "$commits" | cut -d' ' -f2 | tr '\n' ' ')
        git show $hashes
    fi

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Fuzzy search in git pickaxe.

fzf_git_log_pickaxe() {

    if [[ $# == 0 ]]; then
        echo 'Error: search term was not provided.'
        return
    fi

    local commits=$(
        if [ "$FZF_PREVIEW" -eq 1 ]; then
            git log --pretty=custom --color=always -S "$@" |
                fzf --ansi --no-sort --height 100% \
                    --preview "git show --color=always {1}"
        else
            git log --pretty=custom --color=always -S "$@" |
                fzf --ansi --no-sort --height 100%
        fi
    )

    if [[ -n $commits ]]; then
        local hashes=$(printf "$commits" | cut -d' ' -f1 | tr '\n' ' ')
        git show $hashes
    fi

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Fuzzy git reflog.

fzf_git_reflog() {

    local hash=$(
        if [ "$FZF_PREVIEW" -eq 1 ]; then
            git reflog --color=always "$@" |
                fzf --no-multi --ansi --no-sort --height 100% \
                    --preview "git show --color=always {1}"
        else
            git reflog --color=always "$@" |
                fzf --no-multi --ansi --no-sort --height 100%
        fi
    )

    echo $hash

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Fuzzy git reset.

fzf_git_reset() {

    local files=$(
        git diff --name-only --cached |
            xargs -I '{}' realpath --relative-to=. $(git rev-parse --show-toplevel)/'{}' |
            sort --unique |
            fzf --ansi
    )

    if [[ -n $files ]]; then
        git reset $files
    fi

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Fuzzy find a file, with colorful preview, that contains the supplied
# term, then once selected edit it in your preferred editor.
# Note, if your EDITOR is Vim or Neovim then you will be automatically
# scrolled to the selected line.

fzf_grep_edit(){

    if [[ $# == 0 ]]; then
        echo 'Error: search term was not provided.'
        return
    fi

    local matches
    if cmd_exists "rg"; then
        matches=$(
            if [ "$FZF_PREVIEW" -eq 1 ]; then
                rg --color=never --line-number "$1" |
                    fzf --delimiter : \
                    --preview "bat --color=always --line-range {2}: {1}"
            else
                rg --color=never --line-number "$1" |
                    fzf --delimiter :
            fi
        )
    else
        matches=$(
            if [ "$FZF_PREVIEW" -eq 1 ]; then
                ag --nobreak --noheading "$1" |
                    fzf --delimiter : \
                    --preview "bat --color=always --line-range {2}: {1}"
            else
                ag --nobreak --noheading "$1" |
                    fzf --delimiter :
            fi
        )
    fi

    local files=$(echo "$matches" | cut -d':' -f1)

    if [[ -n $files ]]; then
        ${EDITOR:-vim} $files +$(echo "$matches" | cut -d':' -f2)
    fi

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Get gzip information (gzipped file size + reduction size).

gz() {

    declare -i gzippedSize=0
    declare -i originalSize=0

    if [ -f "$1" ]; then
        if [ -s "$1" ]; then

            originalSize=$( wc -c < "$1" )
            printf "\n original size:   %12s\n" "$(hrfs "$originalSize")"

            gzippedSize=$( gzip -c "$1" | wc -c )
            printf " gzipped size:    %12s\n" "$(hrfs "$gzippedSize")"

            printf " ─────────────────────────────\n"
            printf " reduction:       %12s [%s%%]\n\n" \
                "$( hrfs $((originalSize - gzippedSize)) )" \
                "$( printf "%s" "$originalSize $gzippedSize" | \
                    awk '{ printf "%.1f", 100 - $2 * 100 / $1 }' | \
                    sed -e "s/0*$//;s/\.$//" )"
                    #              └─ remove tailing zeros

        else
            printf "\"%s\" is empty.\n" "$1"
        fi
    else
        printf "\"%s\" is not a file.\n" "$1"
    fi

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Human readable file size
# (because `du -h` doesn't cut it for me).

hrfs() {

    printf "%s" "$1" |
    awk '{
            i = 1;
            split("B KB MB GB TB PB EB ZB YB WTFB", v);
            value = $1;

            # confirm that the input is a number
            if ( value + .0 == value ) {

                while ( value >= 1024 ) {
                    value/=1024;
                    i++;
                }

                if ( value == int(value) ) {
                    printf "%d %s", value, v[i]
                } else {
                    printf "%.1f %s", value, v[i]
                }

            }
        }' |
    sed -e ":l" \
        -e "s/\([0-9]\)\([0-9]\{3\}\)/\1,\2/; t l"
    #    └─ add thousands separator
    #       (changes "1023.2 KB" to "1,023.2 KB")
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Create new directories and enter the first one.

mkd() {
    if [ -n "$*" ]; then

        mkdir -p "$@"
        #      └─ make parent directories if needed

        cd "$@" \
            || exit 1

    fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Kill all processes by name

nkill() {

    if [ -z "$1" ]; then
        echo "Please specify name of a process";
    else
        processes_count="$(nlist "$1" | wc -l)"

        ask_for_confirmation "$processes_count processes found. Are you sure you want to kill them?"

        if answer_is_yes; then
            nlist "$1" | awk '{print $2}' | xargs kill -9
        fi
    fi

}


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# List all processes by name

nlist() {
    if [ -z "$1" ]; then
        echo "Please specify name of a process";
    else
        ps auxw | grep "$1"
    fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Process phone images.

ppi() {
    command -v "convert" &> /dev/null \
        || exit 0;

    declare query="${1:-*.jpg}"
    declare geometry="${2:-50%}"

    for i in $query; do
        imgName="${i%.*}.png"
        convert "$i" \
            -colorspace RGB \
            +sigmoidal-contrast 11.6933 \
            -define filter:filter=Sinc \
            -define filter:window=Jinc \
            -define filter:lobes=3 \
            -sigmoidal-contrast 11.6933 \
            -colorspace sRGB \
            -background transparent \
            -gravity center \
            -resize "$geometry" \
            +append \
            "$imgName" \
        && printf "* %s (%s)\n" \
            "$imgName" \
            "$geometry"
    done
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Set PS1 prompt

ps1() {
    set_prompts "$@"
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Search history.

qh() {
    #       ┌─ enable colors for pipe
    #       │  ("--color" enables colors only if
    #       │  the output is in the terminal)
    ag -i --color "$*" "$HISTFILE"
    #   └─ ignore case
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Search for text within the current directory.

qt() {
    ag -ir --color --ignore-dir ".git" --ignore-dir "node_modules" "$*" .
    #   │└─ search all files under each directory, recursively
    #   └─ ignore case
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Switch directories on the basis of frecency
# https://github.com/rupa/z

z() {
    [ $# -gt 0 ] && _z "$@" && return
    cd "$(_z -l 2>&1 | sed 's/^[0-9,.]* *//' | awk '{a[i++]=$0} END {for (j=i-1; j>=0;) print a[j--] }' | fzf)"
}
